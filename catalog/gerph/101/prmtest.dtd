<!-- RISC OS PRM DTD

     Public identifier :
        -//Gerph//DTD PRM documentation 1.01test//EN
     System identifier :
        http://www.movspclr.co.uk/dtd/101/prmtest.dtd

     A DTD for writing documentation on components and their APIs in
     the style of the PRMs.

     Written and designed by Justin Fletcher.

     Updated 19 Apr 2004.
  -->

<!-- Some entities for the PRM DTD -->

<!ENTITY times "&#215;">
<!-- multiplication sign, U+00D7 ISOnum -->
<!-- <!ENTITY ne "&#8800;"> -->
<!ENTITY ne "&lt;&gt;">
<!-- not equal to, U+2260 ISOtech -->
<!ENTITY equiv "&#8801;">
<!-- identical to, U+2261 ISOtech -->
<!-- <!ENTITY le "&#8804;"> -->
<!ENTITY le "&lt;=">
<!-- less-than or equal to, U+2264 ISOtech -->
<!-- <!ENTITY ge "&#8805;"> -->
<!ENTITY ge "&gt;=">
<!-- greater-than or equal to, U+2265 ISOtech -->
<!ENTITY micro "&#181;">
<!-- micro sign (alternatively, use 956 for mu) -->
<!ENTITY copy "&#169;">
<!-- copyright sign, U+00A9 ISOnum -->
<!ENTITY rArr "&#8658;">
<!-- rightwards double arrow, U+21D2 ISOtech -->
<!-- Unicode does not say this is the 'implies' character but does not have 
     another character with this function so ?
     rArr can be used for 'implies' as ISOtech suggests -->

<!-- Specials for us: -->

<!ENTITY implies "&#8658;">
<!-- We recommend you use 'implies' as an entity, just to be clear -->
<!ENTITY hex "&amp;">
<!-- Use &hex; to mean hex, rather than &amp; this ensures that if we
     change to using a different hex descriptor (eg 0x) all the files
     change. -->
<!ENTITY lsl "&lt;&lt;">
<!ENTITY lsr "&gt;&gt;">
<!ENTITY asr "&gt;&gt;&gt;">
<!-- Use lsl, lsr, and asr to indicate bit-shifts -->

<!ENTITY % tables "offset-table | bitfield-table | value-table | message-table">
<!ENTITY % parameters "userinput | menuoption | systemoutput | command | function | userreplace | optional | sysvar | filename | switch">
<!ENTITY % style "strong | sub | sup">
<!ENTITY % link "reference | email">
<!ENTITY % inline "br | image | bnf | list | extended-example | fixme | code | %style;">
<!-- Some real DTD stuff -->
<!ELEMENT riscos-prm ((chapter)*, meta)>
<!ATTLIST riscos-prm
	doc-group CDATA "RISC OS Programmers Reference Manuals"
>
<!ELEMENT chapter (section | import)*>
<!ATTLIST chapter
	title CDATA #REQUIRED
>
<!ATTLIST section
	title CDATA #REQUIRED
>
<!ATTLIST subsection
	title CDATA #REQUIRED
>
<!ATTLIST subsubsection
	title CDATA #REQUIRED
>
<!ATTLIST category
	title CDATA #REQUIRED
>
<!ELEMENT section (p | subsection | subsubsection | category | swi-definition | service-definition | upcall-definition | message-definition | command-definition | sysvar-definition | error-definition | entry-definition | vector-definition | vdu-definition | extended-example | import)*>
<!ELEMENT subsection (p | subsubsection | category | import)*>
<!ELEMENT subsubsection (p | category | import)*>
<!ELEMENT category (p | import)*>
<!-- SWI definition is complex -->
<!ELEMENT swi-definition ((entry?, exit?, use, (example)*, related)?)>
<!ATTLIST swi-definition
	name CDATA #REQUIRED
	number CDATA #REQUIRED
	description CDATA #IMPLIED
	internal (yes | no) "no"
	irqs CDATA "undefined"
	fiqs CDATA "undefined"
	processor-mode (SVC | USR | any | current | undefined) "undefined"
	re-entrant (undefined | yes | no) "undefined"
	reason CDATA #IMPLIED
	reasonname CDATA #IMPLIED
>
<!-- Vector definition is similar to SWI definition -->
<!ELEMENT vector-definition ((entry?, exit?, use, (example)*, related)?)>
<!ATTLIST vector-definition
	name CDATA #REQUIRED
	number CDATA #REQUIRED
	description CDATA #IMPLIED
	internal (yes | no) "no"
	irqs CDATA "undefined"
	fiqs CDATA "undefined"
	processor-mode (SVC | USR | any | current | undefined) "undefined"
	re-entrant (undefined | yes | no) "undefined"
	reason CDATA #IMPLIED
	reasonname CDATA #IMPLIED
>
<!-- Entry-point definition is similar to SWI definition -->
<!ELEMENT entry-definition ((entry?, exit?, use, (example)*, related)?)>
<!ATTLIST entry-definition
	name CDATA #REQUIRED
	number CDATA #IMPLIED
	description CDATA #IMPLIED
	internal (yes | no) "no"
	irqs CDATA "undefined"
	fiqs CDATA "undefined"
	processor-mode (SVC | USR | any | undefined) "undefined"
	re-entrant (undefined | yes | no) "undefined"
	reason CDATA #IMPLIED
	reasonname CDATA #IMPLIED
>
<!-- Service definition is similarly complex -->
<!ELEMENT service-definition (entry, exit, use, (example)*, related)>
<!ATTLIST service-definition
	name CDATA #REQUIRED
	number CDATA #REQUIRED
	description CDATA #REQUIRED
	internal (yes | no) "no"
	reason CDATA #IMPLIED
	reasonname CDATA #IMPLIED
>
<!-- Upcall definition is similarly complex -->
<!ELEMENT upcall-definition (entry, exit, use, (example)*, related)>
<!ATTLIST upcall-definition
	name CDATA #REQUIRED
	number CDATA #REQUIRED
	description CDATA #REQUIRED
	reason CDATA #IMPLIED
	reasonname CDATA #IMPLIED
>
<!-- Command definition is not complex -->
<!ELEMENT command-definition ((syntax)*, (parameter)*, use, (example)*, related?)>
<!ATTLIST command-definition
	name CDATA #REQUIRED
	description CDATA #REQUIRED
>
<!-- VDU definition is similar to a command definition -->
<!ELEMENT vdu-definition ((syntax)*, (parameter)*, use, (example)*, related?)>
<!ATTLIST vdu-definition
	name CDATA #REQUIRED
	description CDATA #REQUIRED
>
<!-- System variable definition is very simple -->
<!ELEMENT sysvar-definition (use, example?, related?)>
<!ATTLIST sysvar-definition
	name CDATA #REQUIRED
	description CDATA #REQUIRED
>
<!-- Error definition is similarly simple -->
<!ELEMENT error-definition (use, related?)>
<!ATTLIST error-definition
	name CDATA #REQUIRED
        number CDATA #REQUIRED
	description CDATA #REQUIRED
>
<!-- Message definition is vaguely complex -->
<!ELEMENT message-definition ((message-table | value-table)?, use, related?)>
<!ATTLIST message-definition
	name CDATA #REQUIRED
	number CDATA #REQUIRED
	description CDATA #REQUIRED
	source CDATA #IMPLIED
	destination CDATA #IMPLIED
	reason CDATA #IMPLIED
	reasonname CDATA #IMPLIED
	broadcast (may | must | never) "never"
	recorded (may | must | never) "never"
>
<!-- A message table is a specialised form of an offset table -->
<!ELEMENT message-table (message)*>
<!ELEMENT message ANY>
<!ATTLIST message
	offset CDATA #REQUIRED
	name CDATA #IMPLIED
>
<!-- A bitfield allows us to define a number of bits in a value -->
<!ELEMENT bitfield-table (bit)*>
<!ELEMENT bit ANY>
<!ATTLIST bit
	number CDATA #REQUIRED
	name CDATA #IMPLIED
	state (reserved | content | set | clear) "content"
>
<!-- A value table allows us to define the meaning of certain values -->
<!ELEMENT value-table (value)*>
<!ATTLIST value-table
	head-number CDATA "Value"
	head-name CDATA #IMPLIED
	head-value CDATA "Meaning"
>
<!ELEMENT value ANY>
<!ATTLIST value
	number CDATA #REQUIRED
	name CDATA #IMPLIED
>
<!-- An offset table is for a block of memory -->
<!ELEMENT offset-table (offset)*>
<!ATTLIST offset-table
	head-number CDATA "Offset"
	head-name CDATA #IMPLIED
	head-value CDATA "Contents"
>
<!ELEMENT offset ANY>
<!ATTLIST offset
	number CDATA #REQUIRED
	name CDATA #IMPLIED
>
<!-- Command syntax -->
<!-- <!ELEMENT syntax (userreplace | optional | switch)*> -->
<!-- Really want to say that it can include the above or text nodes -->
<!ELEMENT syntax ANY>
<!ELEMENT switch (userreplace | optional | text)*>
<!ELEMENT userreplace (#PCDATA)>
<!ELEMENT optional (optional | switch | userreplace | text)*>
<!ATTLIST optional
	alternates (true | false) "false"
>
<!ATTLIST switch
	name  CDATA #REQUIRED
	alias CDATA #IMPLIED
>
<!-- Examples -->
<!ELEMENT example (p | command | br)*>
<!-- An 'extended example' is one which the entire section is the
     example - I'm not at all sure that it's sane -->
<!ELEMENT extended-example (#PCDATA | %parameters; | %inline; | %link;)*>
<!-- User input - something that the user might type
     Should really be text or userreplace -->
<!-- Code sections describe something which is used to control or to
     provide some level of description about features within the system.
     Basically, code is used whereever something is being described. -->
<!ELEMENT code (#PCDATA | userreplace | br)*>
<!ATTLIST code
        type (unknown | pseudo | c | basic | asm | format) "unknown">
<!ELEMENT userinput (#PCDATA | %parameters;)*>
<!-- System input - something that system might display -->
<!ELEMENT systemoutput (#PCDATA | %inline; | %link; | %parameters;)*>
<!-- filename - a filename that might be used
     Should really be text or userreplace -->
<!ELEMENT filename (#PCDATA | %parameters;)*>
<!-- A menu option that the user might see -->
<!ELEMENT menuoption (#PCDATA)>
<!-- sysvar - a system variable
     Should really be text or userreplace -->
<!ELEMENT sysvar (#PCDATA | %parameters;)*>
<!-- Commands -->
<!ELEMENT command (#PCDATA | %parameters; | %inline; | %link;)*>
<!-- Function-like entity -->
<!ELEMENT function (#PCDATA | %parameters; | %inline; | %link;)*>
<!-- Parameters to commands -->
<!ELEMENT parameter ANY>
<!ATTLIST parameter
	name         CDATA #IMPLIED
	switch       CDATA #IMPLIED
	switch-alias CDATA #IMPLIED
	label        CDATA #IMPLIED
>
<!-- Parameters on entry or to (something) -->
<!ELEMENT entry (register-use)*>
<!ELEMENT exit (register-use | processor-flag)*>
<!-- Register use for entry/exit -->
<!ELEMENT register-use ANY>
<!ATTLIST register-use
	number CDATA #REQUIRED
	state (preserved | corrupted | undefined | content) "content"
>
<!-- Processor flags, for the exit from a call -->
<!ELEMENT processor-flag ANY>
<!ATTLIST processor-flag
	name (N | Z | C | V) #REQUIRED
	state (preserved | corrupted | undefined | set | clear | content) "content"
>
<!-- Use of a block -->
<!ELEMENT use (p | category | fixme)*>
<!-- Related things -->
<!ELEMENT related (reference)*>
<!-- References are links -->
<!ELEMENT reference (#PCDATA)>
<!ATTLIST reference
        type (link | swi | sysvar | command | upcall | service | message | entry | vector | document | section | subsection | subsubsection | category | vdu) "link"
	href CDATA #IMPLIED
	name CDATA #IMPLIED
	reason CDATA #IMPLIED
	use-description (yes | no) "no"
>

<!-- import from another document, similar to, but not xinclude -->
<!ELEMENT import EMPTY>
<!ATTLIST import
          document CDATA #REQUIRED
          path CDATA #REQUIRED
>

<!-- Text is just a holder so that we can do an alternation in a switch based
     on text blocks; when processed nothing except the content is produced -->
<!ELEMENT text (#PCDATA)>
<!-- Paragraphs can contain pretty much anything -->
<!-- List - all item elements within the list will be given list points -->
<!ELEMENT list (item)*>
<!ATTLIST list
	type (ordered | unordered) "unordered"
>
<!ELEMENT item (p | fixme)*>
<!ELEMENT p (#PCDATA | %tables; | %parameters; | %inline; | %link; | import)*>
<!-- fixme - data needs correcting element -->
<!ELEMENT fixme (#PCDATA)>
<!-- line break - not sure we should allow this -->
<!ELEMENT br EMPTY>
<!-- An image is just a reference to the image, expected to be nearby -->
<!ELEMENT image (image?)>
<!ATTLIST image
	src CDATA #REQUIRED
	type (png | draw) #REQUIRED
	width CDATA #REQUIRED
	height CDATA #REQUIRED
	caption CDATA #REQUIRED
>
<!-- An email is a email address -->
<!ELEMENT email (#PCDATA)>
<!ATTLIST email
	name CDATA #IMPLIED
	address CDATA #REQUIRED
>
<!-- Stylistic declarations - should these really be here ? -->
<!ELEMENT strong (#PCDATA)>
<!ELEMENT sup (#PCDATA)>
<!ELEMENT sub (#PCDATA)>


<!-- Meta data specific declarations -->
<!ELEMENT meta (maintainer | history | disclaimer | related)*>
<!ELEMENT maintainer (email)*>
<!ELEMENT history (revision)*>
<!ELEMENT revision (change)*>
<!ATTLIST revision
	number CDATA #REQUIRED
	date   CDATA #IMPLIED
	author CDATA #REQUIRED
	title  CDATA #IMPLIED
>
<!ELEMENT change (#PCDATA)>

<!ELEMENT disclaimer (p | %inline; | import)*>

<!ENTITY % BNFDTD PUBLIC "-//Gerph//DTD BNF syntax 1.00//EN" 
                         "http://www.movspclr.co.uk/dtd/bnf/100/bnf.dtd">
%BNFDTD;
